<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.gdb</groupId>
    <artifactId>olive</artifactId>
    <version>0.1</version>
    <name>olive</name>
    <description>main</description>

    <properties>
        <java.version>17</java.version>
<!--        &lt;!&ndash;依赖输出目录&ndash;&gt;
        <output.dependence.file.path>lib/</output.dependence.file.path>
        &lt;!&ndash;jar输出目录&ndash;&gt;
        <output.jar.file.path>bin/</output.jar.file.path>
        &lt;!&ndash;配置文件输出目录&ndash;&gt;
        <output.resource.file.path>/</output.resource.file.path>
        &lt;!&ndash;配置项目输出目录&ndash;&gt;
        <env.LEARN_HOME>olive</env.LEARN_HOME>-->
    </properties>

    <dependencies>
        <!--  压缩图片-->
        <dependency>
            <groupId>net.coobird</groupId>
            <artifactId>thumbnailator</artifactId>
            <version>0.4.8</version>
        </dependency>
        <!--读取图片信息的组件-->
        <dependency>
            <groupId>com.drewnoakes</groupId>
            <artifactId>metadata-extractor</artifactId>
            <version>2.18.0</version>
        </dependency>
        <!--web框架-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--webflux-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <!--mybatis-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>3.0.3</version>
        </dependency>
        <!--MySQL数据库-->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--lombok简化setter、getter、构造方法等的-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!--Knife4j接口文档依赖-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
            <version>4.4.0</version>
        </dependency>
        <!--德鲁伊连接池配置-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.2.21</version>
        </dependency>
        <!-- jwt -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.4.0</version>
        </dependency>
        <!-- 文心一言chat-->
        <dependency>
             <groupId>com.squareup.okhttp3</groupId>
             <artifactId>okhttp</artifactId>
             <version>4.12.0</version>
        </dependency>
        <!--fastjson-->
        <dependency>
            <groupId>com.alibaba.fastjson2</groupId>
            <artifactId>fastjson2</artifactId>
            <version>2.0.48</version>
        </dependency>
        <!--mybatis分页插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>



        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter-test</artifactId>
            <version>3.0.3</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!--配置maven在构建项目的时候除了编译Java源文件以外也编译所有的.xml文件-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- 打JAR包，不包含依赖文件；显式剔除配置文件 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    &lt;!&ndash;${env.LEARN_HOME}为项目配置的环境变量，下同&ndash;&gt;
                    <outputDirectory>${env.LEARN_HOME}/${output.jar.file.path}</outputDirectory>
                    &lt;!&ndash; 将所有的配置文件排除在jar包 &ndash;&gt;
                    <excludes>
                        <exclude>**/*.properties</exclude>
                        <exclude>**/*.yml</exclude>
                        <exclude>**/*.xml</exclude>
                        <exclude>**/*.txt</exclude>
                    </excludes>
                    <archive>
                        &lt;!&ndash; 生成的jar中，包含pom.xml和pom.properties这两个文件 &ndash;&gt;
                        <addMavenDescriptor>true</addMavenDescriptor>
                        &lt;!&ndash; 生成MANIFEST.MF的设置 &ndash;&gt;
                        <manifest>
                            &lt;!&ndash;这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库 下面可能会有多个包，并且只有一个是正确的，
                            其余的可能是带时间戳的，此时会在classpath下面把那个带时间戳的给添加上去，然后我们 在依赖打包的时候，
                            打的是正确的，所以两头会对不上，报错。 &ndash;&gt;
                            <useUniqueVersions>false</useUniqueVersions>
                            &lt;!&ndash; 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 &ndash;&gt;
                            <addClasspath>true</addClasspath>
                            &lt;!&ndash; MANIFEST.MF 中 Class-Path 各个依赖加入前缀 &ndash;&gt;
                            &lt;!&ndash;这个jar所依赖的jar包添加classPath的时候的前缀，需要 下面maven-dependency-plugin插件补充&ndash;&gt;
                            &lt;!&ndash;一定要找对目录，否则jar找不到依赖lib，前边加../是因为jar在bin下，而bin与lib是平级目录&ndash;&gt;
                            <classpathPrefix>../${output.dependence.file.path}</classpathPrefix>
                            &lt;!&ndash;指定jar启动入口类 &ndash;&gt;
                            <mainClass>com.gdb.main.MainApplication</mainClass>
                        </manifest>
                        <manifestEntries>
                            &lt;!&ndash; 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把 这些资源文件打进包里面，这个时候你必须在
                            这边额外指定一些这些资源文件的路径,假如你的pom文件里面配置了 <scope>system</scope>,就是你依赖是你本地的
                            资源，这个时候使用这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进这个地方 &ndash;&gt;
                            &lt;!&ndash;MANIFEST.MF 中 Class-Path 加入自定义路径，多个路径用空格隔开 &ndash;&gt;
                            &lt;!&ndash;此处resources文件夹的内容，需要maven-resources-plugin插件补充上&ndash;&gt;
                            <Class-Path>../${output.resource.file.path}</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>-->

            <!-- 复制依赖的jar包到指定的文件夹里 -->
          <!--  <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            &lt;!&ndash; 拷贝项目依赖包到指定目录下 &ndash;&gt;
                            <outputDirectory>${env.LEARN_HOME}/${output.dependence.file.path}</outputDirectory>
                            &lt;!&ndash; 是否排除间接依赖，间接依赖也要拷贝 &ndash;&gt;
                            <excludeTransitive>false</excludeTransitive>
                            &lt;!&ndash; 是否带上版本号 &ndash;&gt;
                            <stripVersion>false</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
            <!-- 用于复制指定的文件 -->
<!--            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    &lt;!&ndash; 复制配置文件 &ndash;&gt;
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        &lt;!&ndash;将如下格式配置文件拷贝&ndash;&gt;
                                        <exclude>**/*.*</exclude>
                                    </includes>
                                </resource>
                            </resources>
                            &lt;!&ndash;输出路径&ndash;&gt;
                            <outputDirectory>${env.LEARN_HOME}/${output.resource.file.path}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
        </plugins>
    </build>

</project>
